#!/usr/bin/env ruby
require 'rrobots'
require 'optparse'
require 'ostruct'

class OptionsParser
  def self.parse!(args)
    options = OpenStruct.new
    options.resolution  = [800,800]
    options.match = Time.now.to_i + Process.pid
    options.gui = true
    options.timeout = 50000
    options.teams = 8

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: rrobots [options] file1 file2 ..."

      opts.on("--resolution x,y", Array, "X and Y resolution") do |resolution|
        options.resolution = resolution.map &:to_i
      end

      opts.on("--match N", Integer, "Replay match number N") do |n|
        options.match = n
      end

      opts.on("--timeout N", Integer, "Maximum number of ticks for a match") do |n|
        options.timeout = n
      end

      opts.on("--teams N", Integer, "Splits robots into N teams") do |n|
        options.teams = n if n > 0 && n < 8
      end

      opts.on("--[no-]gui", "Run the match with the GUI") do |y|
        options.gui = y
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end
    opts.parse!(args)
    if ARGV.size == 0
      puts opts
      exit
    end
    return options
  end
end
    
def run_out_of_gui(battlefield)
  $stderr.puts 'match ends if only 1 bot/team left or dots get here-->|'

  until battlefield.game_over
    battlefield.tick
    $stderr.print "." if battlefield.time % (battlefield.timeout / 54).to_i == 0
  end
  print_outcome(battlefield)
  exit 0
end

def run_in_gui(battlefield, xres, yres)
  require 'rrobots/gui'
  arena = RRobotsGameWindow.new(battlefield, xres, yres)
  game_over_counter = battlefield.teams.all?{|k,t| t.size < 2} ? 250 : 500
  outcome_printed = false
  arena.on_game_over{|battlefield|
    unless outcome_printed
      print_outcome(battlefield)
      outcome_printed = true
    end
    if game_over_counter < 0
      arena.close
      exit 0
    end
    game_over_counter -= 1
  }
  arena.show
end

def print_outcome(battlefield)
  winners = battlefield.robots.find_all{|robot| !robot.dead}
  puts
  if battlefield.robots.size > battlefield.teams.size
    teams = battlefield.teams.find_all{|name,team| !team.all?{|robot| robot.dead} }
    puts "winner_is:     { #{
      teams.map do |name,team|
        "Team #{name}: [#{team.join(', ')}]"
      end.join(', ')
    } }"
    puts "winner_energy: { #{
      teams.map do |name,team|
        "Team #{name}: [#{team.map do |w| ('%.1f' % w.energy) end.join(', ')}]"
      end.join(', ')
    } }"
  else
    puts "winner_is:     [#{winners.map{|w|w.name}.join(', ')}]"
    puts "winner_energy: [#{winners.map{|w|'%.1f' % w.energy}.join(', ')}]"
  end
  puts "elapsed_ticks: #{battlefield.time}"
  puts "seed :         #{battlefield.seed}"
  puts
  puts "robots :"
  battlefield.robots.each do |robot|
    puts "  #{robot.name}:"
    puts "    damage_given: #{'%.1f' % robot.damage_given}"
    puts "    damage_taken: #{'%.1f' % (100 - robot.energy)}"
    puts "    kills:        #{robot.kills}"
  end
end

def setup_battlefield(options, robots)
  teams = Array.new([options.teams, robots.size].min){ [] }
  battlefield = Battlefield.new options.resolution[0]*2, options.resolution[1]*2, options.timeout, options.match

  c = 0
  team_divider = (robots.size / teams.size.to_f).ceil
  robots.map! do |robot|
    begin
      begin
        require "./"+robot.downcase
      rescue LoadError
      end
      begin
        require "./"+robot
      rescue LoadError
    end
    in_game_name = File.basename(robot).sub(/\..*$/, '')
    in_game_name[0] = in_game_name[0,1].upcase
    team = c / team_divider
    c += 1
    robotrunner = RobotRunner.new(Object.const_get(in_game_name).new, battlefield, team)
    battlefield << robotrunner
    rescue Exception => error
      puts 'Error loading ' + robot + '!'
      warn error
    end
    in_game_name
  end
  battlefield
end

$stdout.sync = true

options = OptionsParser.parse!(ARGV)
robots = ARGV
battlefield = setup_battlefield(options, robots)  
  
if options.gui
  run_in_gui(battlefield, options.resolution[0], options.resolution[1])
else
  run_out_of_gui(battlefield)
end
